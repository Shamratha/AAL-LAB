#include <stdio.h>
#include <stdbool.h>
#include <limits.h>
#define V 4
int min(int a, int b) {
    return (a < b) ? a : b;
}
int tsp(int graph[V][V], bool visited[V], int currentPos, int count, int cost, int min_cost) {
    if (count == V && graph[currentPos][0]) {
        return min(min_cost, cost + graph[currentPos][0]);
    }
    for (int i = 0; i < V; i++) {
        if (!visited[i] && graph[currentPos][i]) {
            visited[i] = true;
            min_cost = tsp(graph, visited, i, count + 1, cost + graph[currentPos][i], min_cost);
            visited[i] = false; // Backtrack
        }
    }
    return min_cost;
}
int main() {
    int graph[V][V] = {
        {0, 10, 15, 20},
        {5, 0, 9, 10},
        {6, 13, 0, 12},
        {8, 8, 9, 0}
    };
    bool visited[V];
    for (int i = 0; i < V; i++) {
        visited[i] = false;
    }
    visited[0] = true;
    int min_cost = INT_MAX;
    min_cost = tsp(graph, visited, 0, 1, 0, min_cost);

    printf("Minimum cost for TSP: %d\n", min_cost);
    return 0;
}
OUTPUT:
Enter the number of cities: 3
Enter the distance matrix (0 means no path between cities):
0
12
45
7
12
3
12
3
4
The minimum cost to visit all cities and return to the starting point is: 27
